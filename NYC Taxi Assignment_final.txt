-- CASE STUDY: New York City Taxi & Limousine Commission (TLC) Data Analysis

-- PURPOSE:
-- The purpose of this case study is to practise the concepts of Data Ingestion, Processing and big data analysis using Apache Hive platform.

-- DATASET OVERVIEW:
-- The dataset gives a better understanding of the taxi system so that the city of New York can improve the efficiency of in-city commute. 
-- It provides precise location coordinates for where the trip started and ended, timestamps for when the trip started and ended, plus a few other variables including fare amount, payment method, and distance travelled.
-- However in this assignment, we ONLY consider the data of yellow taxis for November and December of the year 2017.
-- The dataset has been placed in the HDFS storage of the lab. The path to the data files is as follows:'/common_folder/nyc_taxi_data/' or can be accessed from https://www1.nyc.gov/site/tlc/about/tlc-trip-record-data.page

-- DATA ANALYSIS STEPS:
-- (1) Basic Data Quality Checks
-- (2) Analysis-I
-- (3) Analysis-II


-- IMPORTANT: BEFORE CREATING ANY TABLE, MAKE SURE YOU RUN THIS COMMAND 
ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;


--########## (1) Basic Data Quality Checks #######################

--1(a) Creating a table  nyctaxi_data
drop table AA_nyctlc_data_table;

create external table if not exists AA_nyctlc_data_table(vendorid int, tpep_pickup_datetime string,tpep_dropoff_datetime string, 
passenger_count int, trip_distance double,ratecodeid int, store_and_fwd_flag string, pulocationid int, dolocationid int,
payment_type int, fare_amount double, extra double, mta_tax double, tip_amount double, tolls_amount double,
improvement_surcharge double, total_amount double)
row format delimited fields terminated by ','
location '/common_folder/nyc_taxi_data'
tblproperties ("skip.header.line.count"="2");


-- Running query on the table to check the data availability in it
select * from AA_nyctlc_data_table limit 10;

-- All columns and rows with data are loaded successfully and available for EDA

--1(b) Question 1
-- How many records has each TPEP provider provided? Write a query that summarises the number of records of each provider
--*TPEP = Taxicab & Livery Passenger Enhancement Programs

select vendorid as provider, count(*) as record_count
from AA_nyctlc_data_table
group by vendorid
order by vendorid;

--Answer: From data dictionary vendor id 1 represents Creative Mobile Technologies and 2 represents VeriFone Inc
-- Creative Mobile Technologies LLC = 527,385 (44.9%) and VeriFone Inc = 647,183 (55.1%)
-- VeriFone Inc has provided more records than Creative Mobile Technologies LLC

--1(c) Question 2
-- The data provided is for months November and December only. Check whether the data is consistent, and if not, identify the data quality issues. Mention all data quality issues in comments.

-- Using records that have both pickup and drop time registered. Checking the dataset column my column as a part of EDA
-- checking for any null values in data

select * from AA_nyctlc_data_table where vendorid IS NULL or vendorid = " " or tpep_pickup_datetime IS NULL or 
tpep_pickup_datetime = " " or tpep_dropoff_datetime IS NULL OR tpep_dropoff_datetime = " " or passenger_count IS NULL or 
passenger_count = " " or trip_distance IS NULL or trip_distance = " " or ratecodeid IS NULL or ratecodeid = " " or 
store_and_fwd_flag IS NULL or store_and_fwd_flag = " " or payment_type IS NULL or payment_type = " " or 
fare_amount IS NULL or fare_amount = " " or mta_tax IS NULL or mta_tax = " " or tip_amount IS NULL or tip_amount = " " or 
tolls_amount IS NULL or tolls_amount = " " or improvement_surcharge IS NULL or improvement_surcharge = " " or 
total_amount IS NULL or total_amount = " ";

-- There are no null values in provided dataset

show columns from AA_nyctlc_data_table;

-- Based on the column names provided the data set can be broadly divided in to two sections 1) Trip Details 2) Trip Invoice

select count(*) as total_entries, count(distinct vendorid) as tpep_vendors_count
from AA_nyctlc_data_table;

 -- Total data points available are 1174568 and consists of two TPEP vendors

--summarising the trip count based on pick up date
select  year(tpep_pickup_datetime)as Pickup_yr, month(tpep_pickup_datetime)as Pickup_mnth, count(*)as trip_count
from AA_nyctlc_data_table
group by year(tpep_pickup_datetime), month(tpep_pickup_datetime)
order by Pickup_yr, Pickup_mnth;

-- Some data points available seem to be ambiguous. Fourteen records are found be outside the analysis period (2017 - November & December).
-- 2003(January)=1,2008(December)=2, 2009(January)=1, 2017(October)=6, 2018(January)=4. Total = 14

--summarising the trip count based on drop date
select  year(tpep_dropoff_datetime)as Drop_yr, month(tpep_dropoff_datetime)as Drop_mnth, count(*)as trip_count
from AA_nyctlc_data_table
group by year(tpep_dropoff_datetime), month(tpep_dropoff_datetime)
order by Drop_yr, Drop_mnth;

-- Some data points available seem to be ambiguous. one hundred and seventeen records are found be outside the analysis period (2017 - November & December).
-- 2003(January)=1,2008(December)=1, 2009(January)=2, 2017(October)=2, 2018(January)=110, 2019 (April) = 1. Total = 117.

SELECT count(*) as incorrect_timestamp
FROM AA_nyctlc_data_table
where unix_timestamp(tpep_pickup_datetime) > unix_timestamp(tpep_dropoff_datetime);

-- 73 records have pick up time entered greater than drop time. 

select passenger_count as PassengersPerTrip, count(vendorid) as Passenger_Count
from AA_nyctlc_data_table
group by passenger_count
order by passenger_count;

-- The passenger count per trip ranger from 0 to 9 with one passenger per trip count being the highest followed two per trip.
-- There are some entries with 0 passengers. This can due to any refund or incorrect data.
-- As per the information available in NYCTLC website <https://www1.nyc.gov/site/tlc/passengers/passenger-frequently-asked-questions.page> the maximum passengers that can be accomodated is 7
-- The maximum amount of passengers allowed in a yellow taxicab by law is four (4) in a four (4) passenger taxicab or five (5) passengers in a five (5) passenger taxicab, except that an additional passenger must be accepted if such passenger is under the age of seven (7) and is held on the lap of an adult passenger seated in the rear.
-- So 8 and 9 seem to be abnormality. However the count is negligible (total=4)

select min(trip_distance) as Min_TripDistance, max(trip_distance) as Max_TripDistance, avg(trip_distance) as Avg_TripDistance
from AA_nyctlc_data_table;

-- The average trip distance is 2.8 miles. The minimum (0) and maximum (126) trip distance values seem suspicious too

select ratecodeid as RateCode, count(ratecodeid) as RateCode_Count
from AA_nyctlc_data_table
group by ratecodeid
order by ratecodeid;

-- Per data dictionary there are only 6 rate codes (1= Standard rate, 2=JFK, 3=Newark, 4=Nassau or Westchester, 5=Negotiated fare, 6=Group ride). However dataset shows 7 distinct rate code which is suspicious. Majority rate code falls under "Standard rate"

select store_and_fwd_flag as trip_record_YesNo, count(store_and_fwd_flag) as store_and_fwd_flag_Count
from AA_nyctlc_data_table
group by store_and_fwd_flag
order by store_and_fwd_flag;

-- Majority data points fall under "not a store and forward trip" category. 99.7% of records are not stored. Mights be connection issue to the server.

select count(distinct pulocationid) as Pickup_location, count(distinct dolocationid) as Drop_location
from AA_nyctlc_data_table;

-- The records show 246 pick-up_locations and 260 drop-off_locations

select payment_type as Payment_Method, count(payment_type) as payment_type_Count
from AA_nyctlc_data_table
group by payment_type
order by payment_type;

-- Per data dictionary there are 6 payment type. The data set has 4 distinct payment types. 1= Credit card, 2= Cash, 3= No charge, 4= Dispute, 5= Unknown, 6= Voided trip
-- Credit card seem to be the favourite payment method. Credit card = 790256, Cash = 376373, No charge = 6274, Dispute = 1665

--Invoice data analysis
select min(fare_amount) as min_fare_amount, max(fare_amount) as max_fare_amount, avg(fare_amount) as avg_fare_amount,
min(extra) as min_extra_charge, max(extra) as max_extra_charge, avg(extra) as avg_extra_charge,
count(distinct mta_tax) as tax_category, min(mta_tax) as min_mta_tax, max(mta_tax) as max_mta_tax, avg(mta_tax) as avg_mta_tax,
min(tip_amount) as min_tip_amount, max(tip_amount) as max_tip_amount, avg(tip_amount) as avg_tip_amount,
min(tolls_amount) as min_tolls_amount, max(tolls_amount) as max_tolls_amount, avg(tolls_amount) as avg_tolls_amount,
count(distinct improvement_surcharge) as surcharge_category, min(improvement_surcharge) as min_surcharge, max(improvement_surcharge) as max_surcharge, avg(improvement_surcharge) as avg_surcharge,
min(total_amount) as min_total_amount, max(total_amount) as max_total_amount, avg(total_amount) as avg_total_amount
from AA_nyctlc_data_table;

select tip_amount as Tips, count(*) as count_tip_amount
from AA_nyctlc_data_table
where payment_type=2 and tip_amount!= 0
group by tip_amount;

select mta_tax as tax_category, count(mta_tax) as mta_tax_count
from AA_nyctlc_data_table
group by mta_tax
order by mta_tax;

select improvement_surcharge as surcharge_category, count(improvement_surcharge) as surcharge_count
from AA_nyctlc_data_table
group by improvement_surcharge
order by improvement_surcharge;

-- All amount discussed below are in USD
-- The fair amount ranges from -200 to 650 with an average fair of 12.9. Fair amount less than 0 seem to doubtful unless some kind of coupons or offers were applied.
-- The extra amount ranges from -10.6 to 4.8 with an average of 0.3. This only includes the $0.50 and $1 rush hour and overnight charges. So the minimum extra charge can be only 0
-- The mta tax amount ranges from -0.5 to 11.4 with an average of 0.5. Per data dictionary 0.5 USD is triggered based on metered rate in use. So the values can either be 0 or 0.5. All other values can be considered erroneous.
-- The tip amount ranges from -1.16 to 450 with an average of 1.8. Tip amount is automatically populated for credit card tips. Cash tips are not included. Tip amount less than 0 seem to be suspicous unless it is due to some kind of refund. So negative values can be considerd as not a standard.
-- The tip amount ranges from -5.7 to 895.9 with an average of 0.3.Total amount of all tolls paid in trip.Toll amount less than 0 seem to be suspicous unless it is due to some kind of refund. So negative values can be considerd as not a standard.
-- The improvement surcharge ranges from -0.3 to 1 with an average of 0.3. There are 4 distinct surcharge values. Per data dictionary 0.3USD improvement surcharge assessed trips at the flag drop. So any values which is not 0 or 0.3 can be considered as non standard or erroneous.
-- The improvement surcharge ranges from -200.8 to 928.2 with an average of 16.3. Total amount less then 0 seem to be abnormal and can be considered to be erroneous during analysis
-- All category of invoice amount have negative values which seems to be abnormal. These negative values can be  due to some kind of offer, discount coupon, refund or erroneous. So it can be tagged non standard during analysis.

select count(vendorID) as Same_Pickup_Drop_Location, avg(unix_timestamp(tpep_pickup_datetime)-unix_timestamp(tpep_dropoff_datetime)) / 60 as Avg_Trip_Duration
from AA_nyctlc_data_table
where pulocationid = dolocationid and  (unix_timestamp(tpep_pickup_datetime) > unix_timestamp(tpep_dropoff_datetime));

select avg(unix_timestamp(tpep_pickup_datetime)-unix_timestamp(tpep_dropoff_datetime)) / 60 as Avg_Trip_Duration, min(unix_timestamp(tpep_pickup_datetime)-unix_timestamp(tpep_dropoff_datetime)) / 60 as Min_Trip_Duration, max(unix_timestamp(tpep_pickup_datetime)-unix_timestamp(tpep_dropoff_datetime)) / 60
from AA_nyctlc_data_table
where (unix_timestamp(tpep_pickup_datetime) > unix_timestamp(tpep_dropoff_datetime));

select count(vendorID) as Same_Pickup_Drop_Location, avg(unix_timestamp(tpep_pickup_datetime)-unix_timestamp(tpep_dropoff_datetime)) / 60 as Avg_Trip_Duration
from AA_nyctlc_data_table
where pulocationid = dolocationid;

-- The average trip distance where pickup time is greater than drop time is 38.3 minutes.
-- 82693 reocrds have pickup location same as drop location
-- There are only 3 records where pickup time is greater than drop time and pickup location same as drop location
-- 82690 records with pickup location same as drop location have pick up time less than drop off time. This is abnormal data and not a standard

--1(d) Question 3
-- You might have encountered unusual or erroneous rows in the dataset. Can you conclude which vendor is doing a bad job in providing the records using different columns of the dataset? Summarise your conclusions based on every column where these errors are present. For example,  There are unusual passenger count, i.e. 0 which is unusual.

-- based on data quality check done above , vendors doign a bad job ca be identified where amount is les than 0, pick up time > drop off time, tax/extra/surcharge/rate code/passgenger count data do not match the data dictioinary etc.
select vendorid as provider,  count(*) as record_count
from AA_nyctlc_data_table
where (year(tpep_pickup_datetime) !=2017 or month(tpep_pickup_datetime) not in (11,12) or year(tpep_dropoff_datetime) !=2017 or 
month(tpep_dropoff_datetime) not in (11,12) or unix_timestamp(tpep_pickup_datetime) > unix_timestamp(tpep_dropoff_datetime) or 
passenger_count not in (1,2,3,4,5,6,7) or trip_distance <= 0.0 or ratecodeid not in (1,2,3,4,5,6) or fare_amount <= 0 or 
extra not in (0,0.5,1) or mta_tax not in(0,0.5) or tip_amount < 0.0 or payment_type not in (1,2,3,4,5,6) or (payment_type=2 and tip_amount!=0) or tolls_amount < 0.0 or 
improvement_surcharge not in (0,0.3) or total_amount <= 0)
group by vendorid
order by vendorid;

-- 1= Creative Mobile Technologies LLC, 2= VeriFone Inc.
-- Total non standard data provided by Creative Mobile Technologies LLC =  12911 which is 2.4% of the total records of Creative Mobile Technologies LLC
-- Total non standard data provided by VeriFone Inc = 6414 which is 1% of the total records of VeriFone Inc
-- From above statistics we can conclude that vandor id =1 (Creative Mobile Technologies LLC) is doing a poor job when it comes to reporting data

-- Totally 19325 records out of 1174568 are not standard and seem to be abnormal. This contributes 1.6% of total data points. This is not a significant percent and hence can be removed.


--########## (2) Analysis-I #######################

-- IMPORTANT: Before partitioning any table, make sure you run the below commands.
SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

-- Creating  ORC partitioned nyc_taxi_data table for analysis

drop table ORC_AA_nyctlc_table;

create external table if not exists ORC_AA_nyctlc_table(vendorid int, tpep_pickup_datetime string,tpep_dropoff_datetime string, 
passenger_count int, trip_distance double,ratecodeid int, store_and_fwd_flag string, pulocationid int, dolocationid int,
payment_type int, fare_amount double, extra double, mta_tax double, tip_amount double, tolls_amount double,
improvement_surcharge double, total_amount double) partitioned by (mnth int, m_day int)
stored as orc
location '/user/arockia.liborious_gmail/ORC_NYCTLC/'
tblproperties ("orc.compress" = "SNAPPY");

-- Fetching data into the new orc partitioned table

insert overwrite table ORC_AA_nyctlc_table partition(mnth, m_day)
select vendorid, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, ratecodeid, store_and_fwd_flag,
pulocationid, dolocationid, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
improvement_surcharge, total_amount, month(tpep_pickup_datetime)as mnth, day(tpep_pickup_datetime)as m_day
from AA_nyctlc_data_table
where year(tpep_pickup_datetime) =2017 and month(tpep_pickup_datetime) in (11,12) and year(tpep_dropoff_datetime) =2017 and 
month(tpep_dropoff_datetime) in (11,12) and unix_timestamp(tpep_pickup_datetime) < unix_timestamp(tpep_dropoff_datetime) and 
passenger_count in (1,2,3,4,5,6,7) and trip_distance > 0.0 and ratecodeid in (1,2,3,4,5,6) and payment_type in (1,2,3,4,5,6) and 
fare_amount > 0.0 and extra in (0,0.5,1) and mta_tax in (0,0.5) and tip_amount >= 0.0 and tolls_amount >= 0.0 and 
improvement_surcharge in (0,0.3) and total_amount > 0.0;

-- Running query on the table to check the data availability in it
select * from ORC_AA_nyctlc_table limit 10;

-- This orc partitioned data will be used for further analysis

--(2) Question 1
-- Compare the overall average fare per trip for November and December.
select mnth as Month, avg(fare_amount) as Avg_fare_amount
from ORC_AA_nyctlc_table
group by mnth
order by mnth;

-- November overall average fare amount = 12.9 USD
-- December overall average fare amount = 12.7 USD
-- On an average november month average fair is 0.2 USD higher (1.6%)

--(2) Question 2
--Explore the ‘number of passengers per trip’ - how many trips are made by each level of ‘Passenger_count’? Do most people travel solo or with other people?

select passenger_count as PassengersPerTrip, count(vendorid) as Passenger_Count
from ORC_AA_nyctlc_table
group by passenger_count
order by passenger_count;

select sum(case when passenger_count = 1 then 1 else 0 end)as Solo_Trip_Count, 
sum(case when passenger_count != 1 then 1 else 0 end)as Non_Solo_Trip_Count, 
round(100*sum(case when passenger_count = 1 then 1 else 0 end)/count(*),3) as Percentage
from ORC_AA_nyctlc_table;

--Number of trips with Solo Passengers = 816969 (70.8%)
--Number of trips with more than one Passenger = 336528 (29.2%)
--It can be concluded that people prefer to travel alone (solo)

--(2) Question 3
-- Which is the most preferred mode of payment?

select payment_type as Payment_Mode, count(payment_type) as Payment_Mode_Count
from ORC_AA_nyctlc_table
group by payment_type
order by payment_type;

select sum(case when payment_type = 1 then 1 else 0 end)as Credit_Card_Trips,
sum(case when payment_type = 2 then 1 else 0 end)as Cash_Trips,
count(*)as Total_Trips,
round(100*sum(case when payment_type = 1 then 1 else 0 end)/count(*),2) as Percentage_CreditCard,
round(100*sum(case when payment_type = 2 then 1 else 0 end)/count(*),2) as Percentage_Cash
from ORC_AA_nyctlc_table;

-- Trips with Credit card payments = 779096 (67.5%)
-- Trip with Cash payments = 368610 (32.0%)
-- It is evident that credit card is the most preferred payment mode

--(2) Question 4
-- What is the average tip paid per trip? Compare the average tip with the 25th, 50th and 75th percentiles and comment whether the ‘average tip’ is a representative statistic (of the central tendency) of ‘tip amount paid’. Hint: You may use percentile_approx(DOUBLE col, p): Returns an approximate pth percentile of a numeric column (including floating point types) in the group.

-- Per data dictionary tip amount is automatically populated for credit card tips. Cash tips are not included. Hence removing cash payment type before finding percentile, average and central tendency is necessary

select round(avg(tip_amount),3) as Avg_Tip, round(percentile_approx(tip_amount,0.25),3)as 25th_Percentile, 
round(percentile_approx(tip_amount, 0.50),3)as 50th_Percentile, round(percentile_approx(tip_amount, 0.75),3)as 75th_Percentile,
count(distinct tip_amount)as Distinct_TipValues
from ORC_AA_nyctlc_table
where payment_type != 2;

-- The average tip is $1.86
-- The average and median value differ by 0.68 USD indicating tip amount data is skewed towards the right.
-- Hence the average tip is not the representative of central tendency. Median can be considered
-- Source: https://en.wikipedia.org/wiki/Skewness

--(2) Question 5
-- Explore the ‘Extra’ (charge) variable - what fraction of total trips have an extra charge is levied?

select extra as Extra_Amount, count(*)as Count_Extra
from ORC_AA_nyctlc_table
group by extra
order by extra;

select sum(case when extra != 0 then 1 else 0 end)as Trips_Extra_Amt, count(*) as Total_Trips, 
round(sum(case when extra != 0 then 1 else 0 end)/count(*),5) as Fraction_Trips_ExtraAmt
from ORC_AA_nyctlc_table;

-- Total number of trips with extra charge = 532261 (Fraction  = 0.461 = 46.1%)
-- Total number of trips with no extra charge =621236 (53.9%)

--########## (3) Analysis-II #######################

--(3) Question 1
-- What is the correlation between the number of passengers on any given trip, and the tip paid per trip? Do multiple travellers tip more compared to solo travellers? Hint: Use CORR(Col_1, Col_2)

select round(corr(passenger_count, tip_amount),3) as Corr_PassengerCount_Vs_TipAmt, round(avg(case when passenger_count=1 then tip_amount else null end),3) as Avg_Tip_Solo, round(avg(case when passenger_count != 1 then tip_amount else null end),3) as Avg_Tip_NonSolo
from ORC_AA_nyctlc_table
where payment_type != 2;

-- Correlation between the number of passengers on any given trip, and the tip paid per trip = 0.009
--This indicates a very weak positive correlation
-- Average Tip for Solo Trips: $2.66
-- Average Tip for Non Solo Trips: $2.74
-- Above all suggestes passengers travelling in with family, friends or groups tend to give more tip than solo passengers


--(3) Question 2
-- Segregate the data into five segments of ‘tip paid’: [0-5), [5-10), [10-15) , [15-20) and >=20. Calculate the percentage share of each bucket (i.e. the fraction of trips falling in each bucket).

select Tip_Bucket, count(*)as Count_Tip, max(data_count) as Total_Number_Records, 
round(count(*)/max(data_count),5) as Tip_Bucket_Share
from (select kcol.*, count(*) over () data_count,
	case when tip_amount >= 0 and tip_amount <5 then '0_Bucket_5' 
	when tip_amount >=5 and tip_amount < 10 then '5_Bucket_10'
	when tip_amount >=10 and tip_amount < 15 then '10_Bucket_15'
	when tip_amount >=15 and tip_amount < 20 then '15_Bucket_20'
	else '20above_Bucket' 
	end as Tip_Bucket 
    from ORC_AA_nyctlc_table kcol) as sub_table
group by Tip_Bucket
order by Tip_Bucket_Share desc;


--(3) Question 3
-- Which month has a greater average ‘speed’ - November or December? Note that the variable ‘speed’ will have to be derived from other metrics. Hint: You have columns for distance and time.
-- Speed = Distance / Time (miles per hour)

select round(avg(case when mnth=11 then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3)as November_Avg_Speed, 
round(avg(case when mnth=12 then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3)as December_Avg_Speed, 
round(round(avg(case when mnth=11 then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3) - round(avg(case when mnth=12 then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3),3) as Diff_bw_Nov_Dec_Speed
from ORC_AA_nyctlc_table;

-- Average speed for November = 10.96 mph
-- Average speed for December = 11.06 mph
-- Difference between November and December average speed =  -0.099
-- December month average taxi speed is higher than November month

--(3) Question 4
-- Analyse the average speed of the most happening days of the year, i.e. 31st December (New year’s eve) and 25th December (Christmas) and compare it with the overall average

select round(avg(case when mnth=12 and m_day=25 then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3)as ChristmasEve_Avg_Speed, round(avg(case when mnth=12 and m_day=31 then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3)as NewYearEve_Avg_Speed, round(avg(case when mnth in (11,12) then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3)as Overall_Avg_Speed, round(round(avg(case when mnth=12 and m_day=25 then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3) - round(avg(case when mnth in (11,12) then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3),3) as ChristmasEve_minus_Overall_Avg_Speed, round(round(avg(case when mnth=12 and m_day=31 then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3) - round(avg(case when mnth in (11,12) then (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) else null end),3),3) as NewYearEve_minus_Overall_Avg_Speed
from ORC_AA_nyctlc_table;

-- Overall Average Speed (November+December) = 11.01 mph
-- Average Speed on Christmas Eve = 15.26 mph
-- Average Speed on New Year's Eve: 13.27 mph
-- Average Speed on Christmas Eve is 4.3 mph greater than Overall Average Speed (38.6% higher)
-- Average Speed on New Year's Eve is 2.3 mph greater than Overall Average Speed (20.5% higher)
-- Average speed during christmas and New Year's eve is higher than overall average
-- Average speed during christmas eve is highest among all